{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["PageStyle","styled","div","TopDiv","TopImageDiv","TopContentDiv","ContentDiv","LeftBarDiv","MainContentDiv","CommercialExpDiv","CompanyDiv","RodoDiv","HeaderSpan","Test","p","App","React","Component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u3DAGA,IAAMA,EAAYC,IAAOC,IAAV,KAITC,EAASF,IAAOC,IAAV,KAMNE,EAAeH,IAAOC,IAAX,KAGXG,EAAgBJ,IAAOC,IAAV,KAKbI,EAAaL,IAAOC,IAAV,KAQVK,EAAaN,IAAOC,IAAV,KASVM,EAAiBP,IAAOC,IAAV,KAMdO,EAAmBR,IAAOC,IAAV,KAGhBQ,EAAaT,IAAOC,IAAV,KAGVS,EAAUV,IAAOC,IAAV,KAKPU,EAAaX,IAAOC,IAAV,KAOVW,EAAOZ,IAAOa,EAAV,KAmKKC,E,uKA1JX,OACE,kBAACf,EAAD,KACG,kBAACG,EAAD,KACG,kBAACC,EAAD,MAEA,kBAACC,EAAD,KACI,iDACA,kBAACO,EAAD,6BACA,kBAACA,EAAD,wBACA,kBAACA,EAAD,wCAGR,kBAACN,EAAD,KACI,kBAACC,EAAD,KACI,uCACA,kBAACM,EAAD,+QAIA,yCACA,gDACA,kBAACA,EAAD,6HAGA,2CACA,kBAACA,EAAD,wDAIA,sCACA,sDACA,kBAACA,EAAD,4BAGA,2CACA,kBAACA,EAAD,iDAGA,+CACA,kBAACA,EAAD,6CAGA,oCACA,kBAACA,EAAD,yBAGA,0CACA,kBAACA,EAAD,cAGA,gEACA,kBAACA,EAAD,8DAGA,sCACA,kBAACA,EAAD,8FAGA,sCACA,kBAACA,EAAD,iCAIA,yCACA,kBAACA,EAAD,KACI,qCADJ,aAC2B,6BACvB,sCAFJ,eAE8B,8BAG9B,yCACA,kBAACA,EAAD,KACI,4BACI,yCACA,2DAIZ,kBAACL,EAAD,KACI,kBAACC,EAAD,KACI,wCAEA,kBAACC,EAAD,KACI,6CAElB,w2BAMA,kBAACA,EAAD,KACkB,2CAElB,0yCASA,wEAKc,kBAACA,EAAD,KACI,yDAElB,yeAML,kBAACA,EAAD,KACuB,8CAElB,urCASc,kBAACA,EAAD,KACI,iDAElB,kgDAMA,4EAMH,kBAACC,EAAD,4H,GAjJeK,IAAMC,WCzDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,66BCZN,IAAMC,EAAcC,YAAH,KAsDjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEFK,SAASC,eAAe,SD0EpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38604290.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst PageStyle = styled.div`\ndisplay: flex;\nflex-direction: column;\n`;\nconst TopDiv = styled.div`\ndisplay: flex;\nflex-direction: row;\nbackground: #339966;\ncolor: white;\n`;\nconst TopImageDiv  = styled.div`\nwidth: 420px;\n`;\nconst TopContentDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\npadding: 20px 40px;\n`;\nconst ContentDiv = styled.div`\nclear: both;\ndisplay: flex;                  /* establish flex container */\nflex-direction: row;            /* default value; can be omitted */\nflex-wrap: nowrap;              /* default value; can be omitted */\njustify-content: space-between;\nheight: 100%;\n`;\nconst LeftBarDiv = styled.div`\nfloat: left;\nwidth: 420px;\nbackground: #d9f2e6;\ncolor: #2f2d2d;\nfont-family: \"Helvetica CE\";\nmargin-right: 10px;\n`;\n\nconst MainContentDiv = styled.div`\nfloat: right;\nwidth: 100%;\nheight: 100%;\n`;\n\nconst CommercialExpDiv = styled.div`\n`;\n\nconst CompanyDiv = styled.div`\n`;\n\nconst RodoDiv = styled.div`\nfont-style: italic; \nfont-size: 12px;\n`;\n\nconst HeaderSpan = styled.div`\ncolor: white;\nfont-size: 25px;\nfont-weight: 400;\nfont-family: \"Helvetica CE\";\n`;\n\nconst Test = styled.p`\ncolor: #2f2d2d;\nfont-size: 16px;\nfont-family: \"Open Sans\";\npadding: 2px 2px 2px 2px;\n`;\n\nclass App extends React.Component<{}> {\n  render(){\n    return (\n      <PageStyle>\n         <TopDiv>\n            <TopImageDiv>\n            </TopImageDiv>\n            <TopContentDiv>\n                <h1>Mariusz Rutkowski</h1>\n                <HeaderSpan>Sweetashne@gmail.com</HeaderSpan>\n                <HeaderSpan>+48 781 128 642</HeaderSpan>\n                <HeaderSpan>https://github.com/sweetashne</HeaderSpan>\n            </TopContentDiv>\n        </TopDiv>\n        <ContentDiv>\n            <LeftBarDiv>\n                <h4>PROFILE</h4>\n                <Test>\n                    I would describe myself as a shy person, who likes skimboarding, running, and is really curious how software and games are made. I like to solve real problems and in most cases, I eventually end up reaching the goal, but often it takes more than I would like to.\n                </Test>\n\n                <h4>EDUCATION</h4>\n                <h4>2014 – 2019</h4>\n                <Test >\n                    Bachelor of Engineering. University of Gdansk Faculty: Faculty of Mathematics, Physics and Informatics (in progress)\n                </Test>\n                <h4>2009 - 2013</h4>\n                <Test>\n                    Technical school of Mechanical and IT in Lebork\n                </Test>\n\n                <h4>SKILLS</h4>\n                <h4>Programming Languages:</h4>\n                <Test>\n                    C#, TypeScript, C++\n                </Test>\n                <h4>Frameworks:</h4>\n                <Test>\n                    Entity Framework, ASP.NET MVC, .NET Core\n                </Test>\n                <h4>.NET Libraries:</h4>\n                <Test>\n                    IdentityServer3, Swagger, AutoMapper\n                </Test>\n                <h4>Web:</h4>\n                <Test>\n                    Angular, Node.js\n                </Test>\n                <h4>Databases:</h4>\n                <Test>\n                    MSSql\n                </Test>\n                <h4>Testing, Version Control System:</h4>\n                <Test>\n                    nUnit, xUnit, Moq, Autofixture, FluentAssertions, Git\n                </Test>\n                <h4>Tools:</h4>\n                <Test>\n                    Trello, VisualStudio + R#, Microsoft SQL Server Management Studio, Visual Studio Code\n                </Test>\n                <h4>Other:</h4>\n                <Test>\n                    WebApi, REST, JWT, OAuth\n                </Test>\n\n                <h4>LANGUAGES</h4>\n                <Test>\n                    <b>Polish</b> - native <br />\n                    <b>English</b> - advanced <br />\n                </Test>\n\n                <h4>INTERESTS</h4>\n                <Test>\n                    <ul>\n                        <li>Skimboard</li>\n                        <li>Game development and C++</li>\n                    </ul>\n                </Test>\n            </LeftBarDiv>\n            <MainContentDiv>\n                <CommercialExpDiv>\n                    <h2>Projects</h2>\n\n                    <CompanyDiv>\n                        <h3>My Gym Friend</h3>\n                        \n\t\t\t\t\t\t<p>\n\t\t\t\t\t\tAs my thesis at the university, I choose to make an application that would be helpful to plan and keep track of training. Not only those in the gym but also jogging. \nNone of the existing solutions was working for me, because all applications were too complex, I was not able to define a simple plan, for a week, and then duplicate it with small modification for different dates. Also, It was a simple and real case that would make my academic work more useful. Base on consultation I choose C# as a base for my backend, for the frontend I used angular2+ because it was simpler than other frameworks that I have seen, and it was using typescript by default. I also was using Ionic to port the app as a mobile app. Relational database made in MSSql with EF Core to load the data.\nIn the application user was authenticated with google account.\n\t\t\t\t\t\t</p>\n                    </CompanyDiv>\n\t\t\t\t\t <CompanyDiv>\n                        <h3>Comic shelf</h3>\n                        \n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tProject for all comic and book fans, that don’t need to hold their collection in secret but with courage and enthusiasm share them with others. It was designed to be a platform for people that would like to lend others their treasures and get others in return, of course not for forever, but for the consulting term. In simple words comic lending platform. It was supposed to find a person that has a copy of the album of your dreams that would be willing to lend.\nAfter seeing and using aspboilerplate in the Hungry Glutton project I wanted to check and try myself on using similar patterns but avoid most of the abstraction. Same as the template backend application was made in .NET Core, MSSql, and Angular on the frontend.\nMy responsibilities in this project were to help the main developer that was also a creator of the idea to implement and release it for him and his friends. I was included in the whole process of development. Starting with planning and selecting tasks that were added to the Kanban board on Trello. My favorite part here was to cooperate with other developers and solve more complex problems, plan how to create logic in code, how to test them in small unit tests and also in bigger chunks as an integration test.\n\nTechnologies: .NET Core 2.0, MSSql, Angular 7\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\tURL: https://github.com/Dpio/comic_shelf\n\t\t\t\t\t\t</p>\n                    </CompanyDiv>     \n\t\t\t\t\t\n                    <CompanyDiv>\n                        <h3>Help and support for Dori</h3>\n                        \n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tDori is a local business that runs three small stores in Łeba and Lębork. I created a small and simple business card page using angular because it was the easiest for me at that moment. I also set up hosting, deployed it, installed an SSL certificate, and managed it for a year. \nAdditionally, I was managing the IT part of stores including modification of cash registers data, sync between them, maintaining the warehouse, and fixing small issues.\n\n\t\t\t\t\t\t</p>\n                    </CompanyDiv>\n <CompanyDiv>\n                        <h3>Hungry Glutton</h3>\n                        \n\t\t\t\t\t\t<p>\n\t\t\t\t\t\tPeople working in office buildings can’t wait until their favourite sandwich supplier will be in the building, their biggest fear is that they will miss his visit. That’s why you need this app, it was designed to give you notification whenever Mr. Sandwich is near with his tasty food. It meant to connect and make communication easier. Those people often didn’t have access to the office internal space so they relied on the reception, that might be too busy to spread the call.\n\tThis project was also based on https://aspnetboilerplate.com/. Open Source bootstrap for .NET project. This template allows to create application in .NET Core, MSSql, and Angular on the frontend. The same mentioned in the Comic shelf project.\n\tI was helping in development of proof of concept for this app. It was my first time seeing such complex framework with all levels of abstraction. First time I was writing and modifying tests written in xUnit. \n\tWe were trying to keep the process as real as possible, splitting issues into smaller isolated form, make code review. My goal was to understand why things are designed in such way.\n\nTechnologies: .NET Core 2.0, MSSql, Angular 7,\n\t\t\t\t\t\t</p>\n                    </CompanyDiv>\n                    <CompanyDiv>\n                        <h3>Spherule The game</h3>\n                        \n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tProof of concept that as a team we were able to create a simple game in Unity. Two developers and a person with too much experience in playing and exploring indie games world were trying to create something that they would like. The concept for this project was based on classic logic learning where the user is introduced to new techniques while moving with levels. The goal was to use available tools, such as ramps or trampolines to transport a ball from the starting point to a certain point, resolving small tasks for points. There were two states, design state when the user was able to modify the environment to reach the goal and phase of validation that the user was only able to observe without any interactions. \nMy responsibilities in this project mainly focused on exploring Unity environment, finding the way to solve problems. I made the majority of the code that was created during this project. I was also cooperating and paired programming with the second developer in the team. We did meetings every week and discussed progress and next steps. On each of those, I was presenting a demo to our third friend that was in the role of the project manager.\nWhat did I learn in this project is probably the most interesting. The most important would be basic knowledge of Unity, how to work with scenes, animations, how to use available physics, make UI, load asserts, manipulate objects, attach behaviors. Overall we didn’t publish this game anywhere because of lack of time and motivation.\n\t\t\t\t\t\t\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\tURL: https://github.com/sweetashne/GraKulka\n\t\t\t\t\t\t</p>\n                    </CompanyDiv>\n                </CommercialExpDiv>\n            \n\t\t\t<RodoDiv>\n\t\t\t\tI hereby consent to my personal data being processed by Powel for the purpose of considering my application.\n\t\t\t</RodoDiv>\n\t\t\t</MainContentDiv>\n            </ContentDiv>\n       \n      </PageStyle>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle\n`html, body {\n  height: 100%;\n  // Styles to be inherited. Needs to be on body to affect introjs\n  font-weight: 400;\n  font-size: 21px;\n  line-height: 1.25rem;    \n} \nh1 {\n  color: #ececec;\n  font-size: 38px;\n  font-weight: 700;\n  padding: 0%;\n  margin: 0%;\n}\nh2 {\n  color: #2f2d2d;\n  font-size: 25px;\n  font-weight: 700;\n  text-transform: uppercase;\n}\nh3 {\n  color: #2f2d2d;\n  font-family: Lato;\n  font-size: 23px;\n  font-weight: 700;\n}\nh4 {\n  color: #2f2d2d;\n  font-size: 19px;\n  font-weight: 700;\n  padding: 5px 2px 2px 5px;\n  margin: 5px 5px 5px 5px; \n  margin-right: 10px\n}\n.body {\n  width: 1200px;\n  /* height: 1754px; */\n  color: #2f2d2d;\n  font-family: \"Open Sans\";\n  font-size: 21px;\n}\np {\n  color: #2f2d2d;\n  font-size: 21px;\n  font-family: \"Open Sans\";\n  margin: 0;\n  padding: 0;\n}\n#root { \n  height: 100%;    \n}`;\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}